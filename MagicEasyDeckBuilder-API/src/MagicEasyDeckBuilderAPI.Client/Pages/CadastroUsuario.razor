@inject IUsuarioService UsuarioService
@inject NavigationManager NavManager

@page "/cadastro"

<PageTitle>Cadastro Usuário</PageTitle>

<div class="content-box">
    <h1 class="h1">Cadastro</h1>
    <EditForm Model="model" OnValidSubmit="SubmitHandler">
        <DataAnnotationsValidator/>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">@errorMessage</div>
        }

        <div class="form-group">
            <label for="nome">Nome</label>
            <InputText id="nome" class="form-control" @bind-Value="model.Nome" />
            <ValidationMessage For="@(() => model.Nome)"/>
        </div>
        <div class="form-group">
            <label for="email">E-mail</label>
            <InputText type="email" id="email" class="form-control" @bind-Value="model.Email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
        <div class="form-group">
            <label for="senha">Senha</label>
            <InputText type="password" id="senha" class="form-control" @bind-Value="model.Senha" />
            <ValidationMessage For="@(() => model.Senha)" />
        </div>
        <div class="form-group">
            <label for="comfirmaSenha">Confirma Senha</label>
            <InputText type="password" id="comfirmaSenha" class="form-control" @bind-Value="model.SenhaConfirmacao" />
            <ValidationMessage For="@(() => model.SenhaConfirmacao)" />
        </div>
        <button type="submit" class="btn btn-primary btn-lg">
            Cadastrar
        </button>
    </EditForm>
</div>


@code {
    UsuarioCadastroViewModel model = new();
    string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        model = new();
    }

    protected async Task SubmitHandler()
    {
        try
        {
            await UsuarioService.CadastrarUsuario(model);

            NavManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }   
        
    }
}
