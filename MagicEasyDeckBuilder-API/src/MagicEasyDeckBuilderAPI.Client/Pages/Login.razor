@inject IUsuarioService UsuarioService
@inject NavigationManager NavManager

@page "/login"

<PageTitle>Login</PageTitle>

<div class="content-box">
    <h1 class="h1">Login</h1>
    <EditForm EditContext="editContext" OnValidSubmit="Logar">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">@errorMessage</div>
        }

        <div class="form-group">
            <label for="email">E-mail</label>
            <InputText type="email" id="email" class="form-control" @bind-Value="model.Email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
        <div class="form-group">
            <label for="senha">Senha</label>
            <InputText type="password" id="senha" class="form-control" @bind-Value="model.Senha" />
            <ValidationMessage For="@(() => model.Senha)" />
        </div>

        <button type="submit" class="btn btn-primary btn-lg">
            Logar
        </button>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    protected MainLayout mainLayout { get; set; }

    UsuarioLoginViewModel model = new();
    EditContext? editContext;
    string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);

        base.OnInitialized();
    }

    private async Task Logar()
    {
        try
        {
            var dadosUsuarioAuth = await UsuarioService.LogarUsuario(model);

            await UsuarioService.RegistrarLogin(dadosUsuarioAuth);
            mainLayout.SetUsuarioLogado(dadosUsuarioAuth);

            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
